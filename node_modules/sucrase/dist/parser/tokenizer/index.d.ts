import { TokenType } from "./types";
export declare enum IdentifierRole {
    Access = 0,
    ExportAccess = 1,
    FunctionScopedDeclaration = 2,
    BlockScopedDeclaration = 3,
    ObjectShorthand = 4,
    ObjectKey = 5
}
export declare const enum ContextualKeyword {
    NONE = 0,
    _abstract = 1,
    _as = 2,
    _async = 3,
    _await = 4,
    _checks = 5,
    _constructor = 6,
    _declare = 7,
    _enum = 8,
    _exports = 9,
    _from = 10,
    _get = 11,
    _global = 12,
    _implements = 13,
    _infer = 14,
    _interface = 15,
    _is = 16,
    _keyof = 17,
    _mixins = 18,
    _module = 19,
    _namespace = 20,
    _of = 21,
    _opaque = 22,
    _private = 23,
    _protected = 24,
    _public = 25,
    _readonly = 26,
    _require = 27,
    _set = 28,
    _static = 29,
    _type = 30,
    _unique = 31,
    _React = 32,
    _createClass = 33,
    _createReactClass = 34,
    _displayName = 35
}
export declare class Token {
    constructor();
    type: TokenType;
    contextualKeyword: ContextualKeyword;
    start: number;
    end: number;
    isType: boolean;
    identifierRole: IdentifierRole | null;
    shadowsGlobal: boolean | null;
    contextId: number | null;
    rhsEndIndex: number | null;
    isExpression: boolean | null;
}
export declare function next(): void;
export declare function nextTemplateToken(): void;
export declare function retokenizeSlashAsRegex(): void;
export declare function runInTypeContext<T>(existingTokensInType: number, func: () => T): T;
export declare function pushTypeContext(existingTokensInType: number): boolean;
export declare function popTypeContext(oldIsType: boolean): void;
export declare function eat(type: TokenType): boolean;
export declare function match(type: TokenType): boolean;
export declare function lookaheadType(): TokenType;
export declare class TypeAndKeyword {
    type: TokenType;
    contextualKeyword: ContextualKeyword;
    constructor(type: TokenType, contextualKeyword: ContextualKeyword);
}
export declare function lookaheadTypeAndKeyword(): TypeAndKeyword;
export declare function nextToken(): void;
export declare function skipLineComment(startSkip: number): void;
export declare function skipSpace(): void;
export declare function finishToken(type: TokenType, contextualKeyword?: ContextualKeyword): void;
export declare function getTokenFromCode(code: number): void;
export declare function skipWord(): void;
