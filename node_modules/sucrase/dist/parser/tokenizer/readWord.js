"use strict"; function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, "__esModule", {value: true});// Generated file, do not edit! Run "yarn generate" to re-generate this file.
/* eslint-disable default-case */
var _base = require('../traverser/base');
var _charcodes = require('../util/charcodes');
var _identifier = require('../util/identifier');
var _index = require('./index');
var _types = require('./types');

/**
 * Read an identifier, producing either a name token or matching on one of the existing keywords.
 * For performance, we generate a big nested switch statement that can recognize all language
 * keywords, so that we don't need to do any string allocations or hash table lookups to tell when
 * a name token is a keyword.
 */
 function readWord() {
  switch (_base.input.charCodeAt(_base.state.pos++)) {
    case _charcodes.charCodes.uppercaseR:
      if (
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
      ) {
        (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._React);
        return;
      }
      break;
    case _charcodes.charCodes.lowercaseA:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseB:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._abstract);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseS:
          if (
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._as);
            return;
          }
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseY &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._async);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseW:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._await);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseB:
      if (
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseK &&
        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
      ) {
        (0, _index.finishToken)(_types.TokenType._break);
        return;
      }
      break;
    case _charcodes.charCodes.lowercaseC:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseA:
          switch (_base.input.charCodeAt(_base.state.pos++)) {
            case _charcodes.charCodes.lowercaseS:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._case);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseT:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseH &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._catch);
                return;
              }
              break;
          }
          break;
        case _charcodes.charCodes.lowercaseH:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseK &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._checks);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseL:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._class);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseO:
          if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN) {
            switch (_base.input.charCodeAt(_base.state.pos++)) {
              case _charcodes.charCodes.lowercaseS:
                if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT) {
                  if (
                    !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                    _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                  ) {
                    (0, _index.finishToken)(_types.TokenType._const);
                    return;
                  }
                  if (
                    _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
                    _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
                    _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
                    _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                    _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
                    _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
                    !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                    _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                  ) {
                    (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._constructor);
                    return;
                  }
                }
                break;
              case _charcodes.charCodes.lowercaseT:
                if (
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                  !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                  _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                ) {
                  (0, _index.finishToken)(_types.TokenType._continue);
                  return;
                }
                break;
            }
          }
          break;
        case _charcodes.charCodes.lowercaseR:
          if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE) {
            if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA) {
              if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT) {
                if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE) {
                  switch (_base.input.charCodeAt(_base.state.pos++)) {
                    case _charcodes.charCodes.uppercaseC:
                      if (
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                      ) {
                        (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._createClass);
                        return;
                      }
                      break;
                    case _charcodes.charCodes.uppercaseR:
                      if (
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.uppercaseC &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                      ) {
                        (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._createReactClass);
                        return;
                      }
                      break;
                  }
                }
              }
            }
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseD:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseE:
          switch (_base.input.charCodeAt(_base.state.pos++)) {
            case _charcodes.charCodes.lowercaseB:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseG &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseG &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._debugger);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseC:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._declare);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseF:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._default);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseL:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._delete);
                return;
              }
              break;
          }
          break;
        case _charcodes.charCodes.lowercaseI:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseP &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseY &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.uppercaseN &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseM &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._displayName);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseO:
          if (
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._do);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseE:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseL:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._else);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseN:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseM &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._enum);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseX:
          switch (_base.input.charCodeAt(_base.state.pos++)) {
            case _charcodes.charCodes.lowercaseP:
              if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO) {
                if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR) {
                  if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT) {
                    if (
                      !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                      _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                    ) {
                      (0, _index.finishToken)(_types.TokenType._export);
                      return;
                    }
                    if (
                      _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                      !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                      _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                    ) {
                      (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._exports);
                      return;
                    }
                  }
                }
              }
              break;
            case _charcodes.charCodes.lowercaseT:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseD &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._extends);
                return;
              }
              break;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseF:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseA:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._false);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseI:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseY &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._finally);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseO:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._for);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseR:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseM &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._from);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseU:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._function);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseG:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseE:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._get);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseL:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseB &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._global);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseI:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseF:
          if (
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._if);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseM:
          if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseP) {
            switch (_base.input.charCodeAt(_base.state.pos++)) {
              case _charcodes.charCodes.lowercaseL:
                if (
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseM &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                  !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                  _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                ) {
                  (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._implements);
                  return;
                }
                break;
              case _charcodes.charCodes.lowercaseO:
                if (
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
                  _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                  !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                  _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
                ) {
                  (0, _index.finishToken)(_types.TokenType._import);
                  return;
                }
                break;
            }
          }
          break;
        case _charcodes.charCodes.lowercaseN:
          if (
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._in);
            return;
          }
          switch (_base.input.charCodeAt(_base.state.pos++)) {
            case _charcodes.charCodes.lowercaseF:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._infer);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseS:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseF &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._instanceof);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseT:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseF &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._interface);
                return;
              }
              break;
          }
          break;
        case _charcodes.charCodes.lowercaseS:
          if (
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._is);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseK:
      if (
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseY &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseF &&
        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
      ) {
        (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._keyof);
        return;
      }
      break;
    case _charcodes.charCodes.lowercaseL:
      if (
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
      ) {
        (0, _index.finishToken)(_types.TokenType._let);
        return;
      }
      break;
    case _charcodes.charCodes.lowercaseM:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseI:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseX &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._mixins);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseO:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseD &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._module);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseN:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseA:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseM &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseP &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._namespace);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseE:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseW &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._new);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseU:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._null);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseO:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseF:
          if (
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._of);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseP:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseQ &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._opaque);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseP:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseR:
          switch (_base.input.charCodeAt(_base.state.pos++)) {
            case _charcodes.charCodes.lowercaseI:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseV &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._private);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseO:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseD &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._protected);
                return;
              }
              break;
          }
          break;
        case _charcodes.charCodes.lowercaseU:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseB &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._public);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseR:
      if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE) {
        switch (_base.input.charCodeAt(_base.state.pos++)) {
          case _charcodes.charCodes.lowercaseA:
            if (
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseD &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseY &&
              !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
              _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
            ) {
              (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._readonly);
              return;
            }
            break;
          case _charcodes.charCodes.lowercaseQ:
            if (
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
              !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
              _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
            ) {
              (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._require);
              return;
            }
            break;
          case _charcodes.charCodes.lowercaseT:
            if (
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
              _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
              !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
              _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
            ) {
              (0, _index.finishToken)(_types.TokenType._return);
              return;
            }
            break;
        }
      }
      break;
    case _charcodes.charCodes.lowercaseS:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseE:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._set);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseT:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseA &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._static);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseU:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseP &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._super);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseW:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseC &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseH &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._switch);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseT:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseH:
          switch (_base.input.charCodeAt(_base.state.pos++)) {
            case _charcodes.charCodes.lowercaseI:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseS &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._this);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseR:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseW &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._throw);
                return;
              }
              break;
          }
          break;
        case _charcodes.charCodes.lowercaseR:
          switch (_base.input.charCodeAt(_base.state.pos++)) {
            case _charcodes.charCodes.lowercaseU:
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._true);
                return;
              }
              break;
            case _charcodes.charCodes.lowercaseY:
              if (
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._try);
                return;
              }
              break;
          }
          break;
        case _charcodes.charCodes.lowercaseY:
          if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseP) {
            if (_base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE) {
              if (
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._type);
                return;
              }
              if (
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseO &&
                _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseF &&
                !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
                _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
              ) {
                (0, _index.finishToken)(_types.TokenType._typeof);
                return;
              }
            }
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseU:
      if (
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseN &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseQ &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseU &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
      ) {
        (0, _index.finishToken)(_types.TokenType.name, _index.ContextualKeyword._unique);
        return;
      }
      break;
    case _charcodes.charCodes.lowercaseV:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseA:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseR &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._var);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseO:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseD &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._void);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseW:
      switch (_base.input.charCodeAt(_base.state.pos++)) {
        case _charcodes.charCodes.lowercaseH:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._while);
            return;
          }
          break;
        case _charcodes.charCodes.lowercaseI:
          if (
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseT &&
            _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseH &&
            !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
            _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
          ) {
            (0, _index.finishToken)(_types.TokenType._with);
            return;
          }
          break;
      }
      break;
    case _charcodes.charCodes.lowercaseY:
      if (
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseI &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseE &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseL &&
        _base.input.charCodeAt(_base.state.pos++) === _charcodes.charCodes.lowercaseD &&
        !(0, _identifier.isIdentifierChar)(_base.input.charCodeAt(_base.state.pos)) &&
        _base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.backslash
      ) {
        (0, _index.finishToken)(_types.TokenType._yield);
        return;
      }
      break;
  }

  _base.state.pos--;
  while (_base.state.pos < _base.input.length) {
    const ch = _base.input.charCodeAt(_base.state.pos);
    if ((0, _identifier.isIdentifierChar)(ch)) {
      _base.state.pos++;
    } else if (ch === _charcodes.charCodes.backslash) {
      // \u
      _base.state.pos += 2;
      if (_base.input.charCodeAt(_base.state.pos) === _charcodes.charCodes.leftCurlyBrace) {
        while (_base.input.charCodeAt(_base.state.pos) !== _charcodes.charCodes.leftCurlyBrace) {
          _base.state.pos++;
        }
        _base.state.pos++;
      }
    } else if (ch === _charcodes.charCodes.atSign && _base.input.charCodeAt(_base.state.pos + 1) === _charcodes.charCodes.atSign) {
      _base.state.pos += 2;
    } else {
      break;
    }
  }
  (0, _index.finishToken)(_types.TokenType.name);
} exports.default = readWord;
