"use strict"; function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, "__esModule", {value: true});








var _index = require('../tokenizer/index');
var _types = require('../tokenizer/types');
var _base = require('../traverser/base');














var _expression = require('../traverser/expression');
var _lval = require('../traverser/lval');










var _statement = require('../traverser/statement');











var _util = require('../traverser/util');

function assert(x) {
  if (!x) {
    throw new Error("Assert fail");
  }
}

var ParsingContext; (function (ParsingContext) {
  const EnumMembers = 0; ParsingContext[ParsingContext["EnumMembers"] = EnumMembers] = "EnumMembers";
  const HeritageClauseElement = EnumMembers + 1; ParsingContext[ParsingContext["HeritageClauseElement"] = HeritageClauseElement] = "HeritageClauseElement";
  const TupleElementTypes = HeritageClauseElement + 1; ParsingContext[ParsingContext["TupleElementTypes"] = TupleElementTypes] = "TupleElementTypes";
  const TypeMembers = TupleElementTypes + 1; ParsingContext[ParsingContext["TypeMembers"] = TypeMembers] = "TypeMembers";
  const TypeParametersOrArguments = TypeMembers + 1; ParsingContext[ParsingContext["TypeParametersOrArguments"] = TypeParametersOrArguments] = "TypeParametersOrArguments";
})(ParsingContext || (exports.ParsingContext = ParsingContext = {}));

function tsIsIdentifier() {
  // TODO: actually a bit more complex in TypeScript, but shouldn't matter.
  // See https://github.com/Microsoft/TypeScript/issues/15008
  return (0, _index.match)(_types.TokenType.name);
}

function tsNextTokenCanFollowModifier() {
  // Note: TypeScript's implementation is much more complicated because
  // more things are considered modifiers there.
  // This implementation only handles modifiers not handled by babylon itself. And "static".
  // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...
  (0, _index.next)();
  return (
    !(0, _util.hasPrecedingLineBreak)() &&
    !(0, _index.match)(_types.TokenType.parenL) &&
    !(0, _index.match)(_types.TokenType.colon) &&
    !(0, _index.match)(_types.TokenType.eq) &&
    !(0, _index.match)(_types.TokenType.question)
  );
}

/** Parses a modifier matching one the given modifier names. */
 function tsParseModifier(
  allowedModifiers,
) {
  if (!(0, _index.match)(_types.TokenType.name)) {
    return null;
  }

  const modifier = _base.state.contextualKeyword;
  if (
    allowedModifiers.indexOf(modifier) !== -1 &&
    tsTryParse(() => tsNextTokenCanFollowModifier())
  ) {
    switch (modifier) {
      case _index.ContextualKeyword._readonly:
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._readonly;
        break;
      case _index.ContextualKeyword._abstract:
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;
        break;
      case _index.ContextualKeyword._static:
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;
        break;
      case _index.ContextualKeyword._public:
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._public;
        break;
      case _index.ContextualKeyword._private:
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._private;
        break;
      case _index.ContextualKeyword._protected:
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._protected;
        break;
      default:
        break;
    }
    return modifier;
  }
  return null;
} exports.tsParseModifier = tsParseModifier;

function tsIsListTerminator(kind) {
  switch (kind) {
    case ParsingContext.EnumMembers:
    case ParsingContext.TypeMembers:
      return (0, _index.match)(_types.TokenType.braceR);
    case ParsingContext.HeritageClauseElement:
      return (0, _index.match)(_types.TokenType.braceL);
    case ParsingContext.TupleElementTypes:
      return (0, _index.match)(_types.TokenType.bracketR);
    case ParsingContext.TypeParametersOrArguments:
      return (0, _index.match)(_types.TokenType.greaterThan);
    default:
      break;
  }

  throw new Error("Unreachable");
}

function tsParseList(kind, parseElement) {
  while (!tsIsListTerminator(kind)) {
    // Skipping "parseListElement" from the TS source since that's just for error handling.
    parseElement();
  }
}

function tsParseDelimitedList(kind, parseElement) {
  tsParseDelimitedListWorker(kind, parseElement);
}

/**
 * If !expectSuccess, returns undefined instead of failing to parse.
 * If expectSuccess, parseElement should always return a defined value.
 */
function tsParseDelimitedListWorker(kind, parseElement) {
  while (true) {
    if (tsIsListTerminator(kind)) {
      break;
    }

    parseElement();
    if ((0, _index.eat)(_types.TokenType.comma)) {
      continue;
    }

    if (tsIsListTerminator(kind)) {
      break;
    }
  }
}

function tsParseBracketedList(
  kind,
  parseElement,
  bracket,
  skipFirstToken,
) {
  if (!skipFirstToken) {
    if (bracket) {
      (0, _util.expect)(_types.TokenType.bracketL);
    } else {
      (0, _util.expect)(_types.TokenType.lessThan);
    }
  }
  tsParseDelimitedList(kind, parseElement);
  if (bracket) {
    (0, _util.expect)(_types.TokenType.bracketR);
  } else {
    (0, _util.expect)(_types.TokenType.greaterThan);
  }
}

function tsParseEntityName() {
  (0, _expression.parseIdentifier)();
  while ((0, _index.eat)(_types.TokenType.dot)) {
    (0, _expression.parseIdentifier)();
  }
}

function tsParseTypeReference() {
  tsParseEntityName();
  if (!(0, _util.hasPrecedingLineBreak)() && (0, _index.match)(_types.TokenType.lessThan)) {
    tsParseTypeArguments();
  }
}

function tsParseThisTypePredicate() {
  (0, _index.next)();
  tsParseTypeAnnotation();
}

function tsParseThisTypeNode() {
  (0, _index.next)();
}

function tsParseTypeQuery() {
  (0, _util.expect)(_types.TokenType._typeof);
  tsParseEntityName();
}

function tsParseTypeParameter() {
  (0, _expression.parseIdentifier)();
  if ((0, _index.eat)(_types.TokenType._extends)) {
    tsParseType();
  }
  if ((0, _index.eat)(_types.TokenType.eq)) {
    tsParseType();
  }
}

 function tsTryParseTypeParameters() {
  if ((0, _index.match)(_types.TokenType.lessThan)) {
    tsParseTypeParameters();
  }
} exports.tsTryParseTypeParameters = tsTryParseTypeParameters;

function tsParseTypeParameters() {
  const oldIsType = (0, _index.pushTypeContext)(0);
  if ((0, _index.match)(_types.TokenType.lessThan) || (0, _index.match)(_types.TokenType.typeParameterStart)) {
    (0, _index.next)();
  } else {
    (0, _util.unexpected)();
  }

  tsParseBracketedList(
    ParsingContext.TypeParametersOrArguments,
    tsParseTypeParameter,
    /* bracket */ false,
    /* skipFirstToken */ true,
  );
  (0, _index.popTypeContext)(oldIsType);
}

// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,
// but here it's always false, because this is only used for types.
function tsFillSignature(returnToken) {
  // Arrow fns *must* have return token (`=>`). Normal functions can omit it.
  const returnTokenRequired = returnToken === _types.TokenType.arrow;
  tsTryParseTypeParameters();
  (0, _util.expect)(_types.TokenType.parenL);
  tsParseBindingListForSignature(false /* isBlockScope */);
  if (returnTokenRequired) {
    tsParseTypeOrTypePredicateAnnotation(returnToken);
  } else if ((0, _index.match)(returnToken)) {
    tsParseTypeOrTypePredicateAnnotation(returnToken);
  }
}

function tsParseBindingListForSignature(isBlockScope) {
  (0, _lval.parseBindingList)(_types.TokenType.parenR, isBlockScope);
}

function tsParseTypeMemberSemicolon() {
  if (!(0, _index.eat)(_types.TokenType.comma)) {
    (0, _util.semicolon)();
  }
}

var SignatureMemberKind; (function (SignatureMemberKind) {
  const TSCallSignatureDeclaration = 0; SignatureMemberKind[SignatureMemberKind["TSCallSignatureDeclaration"] = TSCallSignatureDeclaration] = "TSCallSignatureDeclaration";
  const TSConstructSignatureDeclaration = TSCallSignatureDeclaration + 1; SignatureMemberKind[SignatureMemberKind["TSConstructSignatureDeclaration"] = TSConstructSignatureDeclaration] = "TSConstructSignatureDeclaration";
})(SignatureMemberKind || (SignatureMemberKind = {}));

function tsParseSignatureMember(kind) {
  if (kind === SignatureMemberKind.TSConstructSignatureDeclaration) {
    (0, _util.expect)(_types.TokenType._new);
  }
  tsFillSignature(_types.TokenType.colon);
  tsParseTypeMemberSemicolon();
}

function tsIsUnambiguouslyIndexSignature() {
  (0, _index.next)(); // Skip '{'
  return (0, _index.eat)(_types.TokenType.name) && (0, _index.match)(_types.TokenType.colon);
}

function tsTryParseIndexSignature() {
  if (!((0, _index.match)(_types.TokenType.bracketL) && tsLookAhead(tsIsUnambiguouslyIndexSignature))) {
    return false;
  }

  (0, _util.expect)(_types.TokenType.bracketL);
  (0, _expression.parseIdentifier)();
  tsParseTypeAnnotation();
  (0, _util.expect)(_types.TokenType.bracketR);

  tsTryParseTypeAnnotation();
  tsParseTypeMemberSemicolon();
  return true;
}

function tsParsePropertyOrMethodSignature(isReadonly) {
  (0, _expression.parsePropertyName)(-1 /* Types don't need context IDs. */);
  (0, _index.eat)(_types.TokenType.question);

  if (!isReadonly && ((0, _index.match)(_types.TokenType.parenL) || (0, _index.match)(_types.TokenType.lessThan))) {
    tsFillSignature(_types.TokenType.colon);
    tsParseTypeMemberSemicolon();
  } else {
    tsTryParseTypeAnnotation();
    tsParseTypeMemberSemicolon();
  }
}

function tsParseTypeMember() {
  if ((0, _index.match)(_types.TokenType.parenL) || (0, _index.match)(_types.TokenType.lessThan)) {
    tsParseSignatureMember(SignatureMemberKind.TSCallSignatureDeclaration);
    return;
  }
  if ((0, _index.match)(_types.TokenType._new) && tsLookAhead(tsIsStartOfConstructSignature)) {
    tsParseSignatureMember(SignatureMemberKind.TSConstructSignatureDeclaration);
    return;
  }
  const readonly = !!tsParseModifier([_index.ContextualKeyword._readonly]);

  const found = tsTryParseIndexSignature();
  if (found) {
    return;
  }
  tsParsePropertyOrMethodSignature(readonly);
}

function tsIsStartOfConstructSignature() {
  (0, _index.next)();
  return (0, _index.match)(_types.TokenType.parenL) || (0, _index.match)(_types.TokenType.lessThan);
}

function tsParseTypeLiteral() {
  tsParseObjectTypeMembers();
}

function tsParseObjectTypeMembers() {
  (0, _util.expect)(_types.TokenType.braceL);
  tsParseList(ParsingContext.TypeMembers, tsParseTypeMember);
  (0, _util.expect)(_types.TokenType.braceR);
}

function tsIsStartOfMappedType() {
  (0, _index.next)();
  if ((0, _index.eat)(_types.TokenType.plus) || (0, _index.eat)(_types.TokenType.minus)) {
    return (0, _util.isContextual)(_index.ContextualKeyword._readonly);
  }
  if ((0, _util.isContextual)(_index.ContextualKeyword._readonly)) {
    (0, _index.next)();
  }
  if (!(0, _index.match)(_types.TokenType.bracketL)) {
    return false;
  }
  (0, _index.next)();
  if (!tsIsIdentifier()) {
    return false;
  }
  (0, _index.next)();
  return (0, _index.match)(_types.TokenType._in);
}

function tsParseMappedTypeParameter() {
  (0, _expression.parseIdentifier)();
  (0, _util.expect)(_types.TokenType._in);
  tsParseType();
}

function tsParseMappedType() {
  (0, _util.expect)(_types.TokenType.braceL);
  if ((0, _index.match)(_types.TokenType.plus) || (0, _index.match)(_types.TokenType.minus)) {
    (0, _index.next)();
    (0, _util.expectContextual)(_index.ContextualKeyword._readonly);
  } else {
    (0, _util.eatContextual)(_index.ContextualKeyword._readonly);
  }
  (0, _util.expect)(_types.TokenType.bracketL);
  tsParseMappedTypeParameter();
  (0, _util.expect)(_types.TokenType.bracketR);
  if ((0, _index.match)(_types.TokenType.plus) || (0, _index.match)(_types.TokenType.minus)) {
    (0, _index.next)();
    (0, _util.expect)(_types.TokenType.question);
  } else {
    (0, _index.eat)(_types.TokenType.question);
  }
  tsTryParseType();
  (0, _util.semicolon)();
  (0, _util.expect)(_types.TokenType.braceR);
}

function tsParseTupleType() {
  tsParseBracketedList(
    ParsingContext.TupleElementTypes,
    tsParseType,
    /* bracket */ true,
    /* skipFirstToken */ false,
  );
}

function tsParseParenthesizedType() {
  (0, _util.expect)(_types.TokenType.parenL);
  tsParseType();
  (0, _util.expect)(_types.TokenType.parenR);
}

var FunctionType; (function (FunctionType) {
  const TSFunctionType = 0; FunctionType[FunctionType["TSFunctionType"] = TSFunctionType] = "TSFunctionType";
  const TSConstructorType = TSFunctionType + 1; FunctionType[FunctionType["TSConstructorType"] = TSConstructorType] = "TSConstructorType";
})(FunctionType || (FunctionType = {}));

function tsParseFunctionOrConstructorType(type) {
  if (type === FunctionType.TSConstructorType) {
    (0, _util.expect)(_types.TokenType._new);
  }
  tsFillSignature(_types.TokenType.arrow);
}

function tsParseNonArrayType() {
  switch (_base.state.type) {
    case _types.TokenType.name:
      tsParseTypeReference();
      return;
    case _types.TokenType._void:
    case _types.TokenType._null:
      (0, _index.next)();
      return;
    case _types.TokenType.string:
    case _types.TokenType.num:
    case _types.TokenType._true:
    case _types.TokenType._false:
      (0, _expression.parseLiteral)();
      return;
    case _types.TokenType.minus:
      (0, _index.next)();
      (0, _expression.parseLiteral)();
      return;
    case _types.TokenType._this: {
      tsParseThisTypeNode();
      if ((0, _util.isContextual)(_index.ContextualKeyword._is) && !(0, _util.hasPrecedingLineBreak)()) {
        tsParseThisTypePredicate();
      }
      return;
    }
    case _types.TokenType._typeof:
      tsParseTypeQuery();
      return;
    case _types.TokenType.braceL:
      if (tsLookAhead(tsIsStartOfMappedType)) {
        tsParseMappedType();
      } else {
        tsParseTypeLiteral();
      }
      return;
    case _types.TokenType.bracketL:
      tsParseTupleType();
      return;
    case _types.TokenType.parenL:
      tsParseParenthesizedType();
      return;
    default:
      break;
  }

  throw (0, _util.unexpected)();
}

function tsParseArrayTypeOrHigher() {
  tsParseNonArrayType();
  while (!(0, _util.hasPrecedingLineBreak)() && (0, _index.eat)(_types.TokenType.bracketL)) {
    if (!(0, _index.eat)(_types.TokenType.bracketR)) {
      // If we hit ] immediately, this is an array type, otherwise it's an indexed access type.
      tsParseType();
      (0, _util.expect)(_types.TokenType.bracketR);
    }
  }
}

function tsParseInferType() {
  (0, _util.expectContextual)(_index.ContextualKeyword._infer);
  (0, _expression.parseIdentifier)();
}

function tsParseTypeOperatorOrHigher() {
  if ((0, _util.isContextual)(_index.ContextualKeyword._keyof) || (0, _util.isContextual)(_index.ContextualKeyword._unique)) {
    (0, _index.next)();
    tsParseTypeOperatorOrHigher();
  } else if ((0, _util.isContextual)(_index.ContextualKeyword._infer)) {
    tsParseInferType();
  } else {
    tsParseArrayTypeOrHigher();
  }
}

function tsParseUnionOrIntersectionType(
  parseConstituentType,
  operator,
) {
  (0, _index.eat)(operator);
  parseConstituentType();
  if ((0, _index.match)(operator)) {
    while ((0, _index.eat)(operator)) {
      parseConstituentType();
    }
  }
}

function tsParseIntersectionTypeOrHigher() {
  tsParseUnionOrIntersectionType(tsParseTypeOperatorOrHigher, _types.TokenType.bitwiseAND);
}

function tsParseUnionTypeOrHigher() {
  tsParseUnionOrIntersectionType(tsParseIntersectionTypeOrHigher, _types.TokenType.bitwiseOR);
}

function tsIsStartOfFunctionType() {
  if ((0, _index.match)(_types.TokenType.lessThan)) {
    return true;
  }
  return (0, _index.match)(_types.TokenType.parenL) && tsLookAhead(tsIsUnambiguouslyStartOfFunctionType);
}

function tsSkipParameterStart() {
  if ((0, _index.match)(_types.TokenType.name) || (0, _index.match)(_types.TokenType._this)) {
    (0, _index.next)();
    return true;
  }
  return false;
}

function tsIsUnambiguouslyStartOfFunctionType() {
  (0, _index.next)();
  if ((0, _index.match)(_types.TokenType.parenR) || (0, _index.match)(_types.TokenType.ellipsis)) {
    // ( )
    // ( ...
    return true;
  }
  if (tsSkipParameterStart()) {
    if ((0, _index.match)(_types.TokenType.colon) || (0, _index.match)(_types.TokenType.comma) || (0, _index.match)(_types.TokenType.question) || (0, _index.match)(_types.TokenType.eq)) {
      // ( xxx :
      // ( xxx ,
      // ( xxx ?
      // ( xxx =
      return true;
    }
    if ((0, _index.match)(_types.TokenType.parenR)) {
      (0, _index.next)();
      if ((0, _index.match)(_types.TokenType.arrow)) {
        // ( xxx ) =>
        return true;
      }
    }
  }
  return false;
}

function tsParseTypeOrTypePredicateAnnotation(returnToken) {
  const oldIsType = (0, _index.pushTypeContext)(0);
  (0, _util.expect)(returnToken);
  tsTryParse(() => tsParseTypePredicatePrefix());
  // Regardless of whether we found an "is" token, there's now just a regular type in front of
  // us.
  tsParseType();
  (0, _index.popTypeContext)(oldIsType);
}

function tsTryParseTypeOrTypePredicateAnnotation() {
  if ((0, _index.match)(_types.TokenType.colon)) {
    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);
  }
}

 function tsTryParseTypeAnnotation() {
  if ((0, _index.match)(_types.TokenType.colon)) {
    tsParseTypeAnnotation();
  }
} exports.tsTryParseTypeAnnotation = tsTryParseTypeAnnotation;

function tsTryParseType() {
  if ((0, _index.eat)(_types.TokenType.colon)) {
    tsParseType();
  }
}

function tsParseTypePredicatePrefix() {
  (0, _expression.parseIdentifier)();
  if ((0, _util.isContextual)(_index.ContextualKeyword._is) && !(0, _util.hasPrecedingLineBreak)()) {
    (0, _index.next)();
    return true;
  }
  return false;
}

 function tsParseTypeAnnotation() {
  const oldIsType = (0, _index.pushTypeContext)(0);
  (0, _util.expect)(_types.TokenType.colon);
  tsParseType();
  (0, _index.popTypeContext)(oldIsType);
} exports.tsParseTypeAnnotation = tsParseTypeAnnotation;

 function tsParseType() {
  tsParseNonConditionalType();
  if ((0, _util.hasPrecedingLineBreak)() || !(0, _index.eat)(_types.TokenType._extends)) {
    return;
  }
  // extends type
  tsParseNonConditionalType();
  (0, _util.expect)(_types.TokenType.question);
  // true type
  tsParseType();
  (0, _util.expect)(_types.TokenType.colon);
  // false type
  tsParseType();
} exports.tsParseType = tsParseType;

 function tsParseNonConditionalType() {
  if (tsIsStartOfFunctionType()) {
    tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);
    return;
  }
  if ((0, _index.match)(_types.TokenType._new)) {
    // As in `new () => Date`
    tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);
    return;
  }
  tsParseUnionTypeOrHigher();
} exports.tsParseNonConditionalType = tsParseNonConditionalType;

 function tsParseTypeAssertion() {
  const oldIsType = (0, _index.pushTypeContext)(1);
  tsParseType();
  (0, _util.expect)(_types.TokenType.greaterThan);
  (0, _index.popTypeContext)(oldIsType);
  (0, _expression.parseMaybeUnary)();
} exports.tsParseTypeAssertion = tsParseTypeAssertion;

// Returns true if parsing was successful.
function tsTryParseTypeArgumentsInExpression() {
  return tsTryParseAndCatch(() => {
    const oldIsType = (0, _index.pushTypeContext)(0);
    (0, _util.expect)(_types.TokenType.lessThan);
    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.typeParameterStart;
    tsParseDelimitedList(ParsingContext.TypeParametersOrArguments, tsParseType);
    (0, _util.expect)(_types.TokenType.greaterThan);
    (0, _index.popTypeContext)(oldIsType);
    (0, _util.expect)(_types.TokenType.parenL);
  });
}

function tsParseHeritageClause() {
  tsParseDelimitedList(ParsingContext.HeritageClauseElement, tsParseExpressionWithTypeArguments);
}

function tsParseExpressionWithTypeArguments() {
  // Note: TS uses parseLeftHandSideExpressionOrHigher,
  // then has grammar errors later if it's not an EntityName.
  tsParseEntityName();
  if ((0, _index.match)(_types.TokenType.lessThan)) {
    tsParseTypeArguments();
  }
}

function tsParseInterfaceDeclaration() {
  (0, _expression.parseIdentifier)();
  tsTryParseTypeParameters();
  if ((0, _index.eat)(_types.TokenType._extends)) {
    tsParseHeritageClause();
  }
  tsParseObjectTypeMembers();
}

function tsParseTypeAliasDeclaration() {
  (0, _expression.parseIdentifier)();
  tsTryParseTypeParameters();
  (0, _util.expect)(_types.TokenType.eq);
  tsParseType();
  (0, _util.semicolon)();
}

function tsParseEnumMember() {
  // Computed property names are grammar errors in an enum, so accept just string literal or identifier.
  if ((0, _index.match)(_types.TokenType.string)) {
    (0, _expression.parseLiteral)();
  } else {
    (0, _expression.parseIdentifier)();
  }
  if ((0, _index.eat)(_types.TokenType.eq)) {
    const eqIndex = _base.state.tokens.length - 1;
    (0, _expression.parseMaybeAssign)();
    _base.state.tokens[eqIndex].rhsEndIndex = _base.state.tokens.length;
  }
}

function tsParseEnumDeclaration() {
  (0, _expression.parseIdentifier)();
  (0, _util.expect)(_types.TokenType.braceL);
  tsParseDelimitedList(ParsingContext.EnumMembers, tsParseEnumMember);
  (0, _util.expect)(_types.TokenType.braceR);
}

function tsParseModuleBlock() {
  (0, _util.expect)(_types.TokenType.braceL);
  // Inside of a module block is considered "top-level", meaning it can have imports and exports.
  (0, _statement.parseBlockBody)(/* topLevel */ true, /* end */ _types.TokenType.braceR);
}

function tsParseModuleOrNamespaceDeclaration() {
  (0, _expression.parseIdentifier)();
  if ((0, _index.eat)(_types.TokenType.dot)) {
    tsParseModuleOrNamespaceDeclaration();
  } else {
    tsParseModuleBlock();
  }
}

function tsParseAmbientExternalModuleDeclaration() {
  if ((0, _util.isContextual)(_index.ContextualKeyword._global)) {
    (0, _expression.parseIdentifier)();
  } else if ((0, _index.match)(_types.TokenType.string)) {
    (0, _expression.parseExprAtom)();
  } else {
    (0, _util.unexpected)();
  }

  if ((0, _index.match)(_types.TokenType.braceL)) {
    tsParseModuleBlock();
  } else {
    (0, _util.semicolon)();
  }
}

 function tsParseImportEqualsDeclaration() {
  (0, _expression.parseIdentifier)();
  (0, _util.expect)(_types.TokenType.eq);
  tsParseModuleReference();
  (0, _util.semicolon)();
} exports.tsParseImportEqualsDeclaration = tsParseImportEqualsDeclaration;

function tsIsExternalModuleReference() {
  return (0, _util.isContextual)(_index.ContextualKeyword._require) && (0, _index.lookaheadType)() === _types.TokenType.parenL;
}

function tsParseModuleReference() {
  if (tsIsExternalModuleReference()) {
    tsParseExternalModuleReference();
  } else {
    tsParseEntityName();
  }
}

function tsParseExternalModuleReference() {
  (0, _util.expectContextual)(_index.ContextualKeyword._require);
  (0, _util.expect)(_types.TokenType.parenL);
  if (!(0, _index.match)(_types.TokenType.string)) {
    throw (0, _util.unexpected)();
  }
  (0, _expression.parseLiteral)();
  (0, _util.expect)(_types.TokenType.parenR);
}

// Utilities

function tsLookAhead(f) {
  const snapshot = _base.state.snapshot();
  const res = f();
  _base.state.restoreFromSnapshot(snapshot);
  return res;
}

// Returns true if parsing was successful.
function tsTryParseAndCatch(f) {
  const snapshot = _base.state.snapshot();
  try {
    f();
    return true;
  } catch (e) {
    if (e instanceof SyntaxError) {
      _base.state.restoreFromSnapshot(snapshot);
      return false;
    }
    throw e;
  }
}

// The function should return true if the parse was successful. If not, we revert the state to
// before we started parsing.
function tsTryParse(f) {
  const snapshot = _base.state.snapshot();
  const wasSuccessful = f();
  if (wasSuccessful) {
    return true;
  } else {
    _base.state.restoreFromSnapshot(snapshot);
    return false;
  }
}

// Returns true if a statement matched.
function tsTryParseDeclare() {
  switch (_base.state.type) {
    case _types.TokenType._function: {
      const oldIsType = (0, _index.pushTypeContext)(1);
      (0, _index.next)();
      // We don't need to precisely get the function start here, since it's only used to mark
      // the function as a type if it's bodiless, and it's already a type here.
      const functionStart = _base.state.start;
      (0, _statement.parseFunction)(functionStart, /* isStatement */ true);
      (0, _index.popTypeContext)(oldIsType);
      return true;
    }
    case _types.TokenType._class: {
      const oldIsType = (0, _index.pushTypeContext)(1);
      (0, _statement.parseClass)(/* isStatement */ true, /* optionalId */ false);
      (0, _index.popTypeContext)(oldIsType);
      return true;
    }
    case _types.TokenType._const: {
      if ((0, _index.match)(_types.TokenType._const) && (0, _util.isLookaheadContextual)(_index.ContextualKeyword._enum)) {
        const oldIsType = (0, _index.pushTypeContext)(1);
        // `const enum = 0;` not allowed because "enum" is a strict mode reserved word.
        (0, _util.expect)(_types.TokenType._const);
        (0, _util.expectContextual)(_index.ContextualKeyword._enum);
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;
        tsParseEnumDeclaration();
        (0, _index.popTypeContext)(oldIsType);
        return true;
      }
    }
    // falls through
    case _types.TokenType._var:
    case _types.TokenType._let: {
      const oldIsType = (0, _index.pushTypeContext)(1);
      (0, _statement.parseVarStatement)(_base.state.type);
      (0, _index.popTypeContext)(oldIsType);
      return true;
    }
    case _types.TokenType.name: {
      const oldIsType = (0, _index.pushTypeContext)(1);
      const contextualKeyword = _base.state.contextualKeyword;
      let matched = false;
      if (contextualKeyword === _index.ContextualKeyword._global) {
        tsParseAmbientExternalModuleDeclaration();
        matched = true;
        return true;
      } else {
        matched = tsParseDeclaration(contextualKeyword, /* isBeforeToken */ true);
      }
      (0, _index.popTypeContext)(oldIsType);
      return matched;
    }
    default:
      return false;
  }
}

// Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.
// Returns true if it matched a declaration.
function tsTryParseExportDeclaration() {
  return tsParseDeclaration(_base.state.contextualKeyword, /* isBeforeToken */ true);
}

// Returns true if it matched a statement.
function tsParseExpressionStatement(contextualKeyword) {
  switch (contextualKeyword) {
    case _index.ContextualKeyword._declare: {
      const declareTokenIndex = _base.state.tokens.length - 1;
      const matched = tsTryParseDeclare();
      if (matched) {
        _base.state.tokens[declareTokenIndex].type = _types.TokenType._declare;
        return true;
      }
      break;
    }
    case _index.ContextualKeyword._global:
      // `global { }` (with no `declare`) may appear inside an ambient module declaration.
      // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past "global".
      if ((0, _index.match)(_types.TokenType.braceL)) {
        tsParseModuleBlock();
        return true;
      }
      break;

    default:
      return tsParseDeclaration(contextualKeyword, /* isBeforeToken */ false);
  }
  return false;
}

// Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.
// Returns true if it matched a declaration.
function tsParseDeclaration(contextualKeyword, isBeforeToken) {
  switch (contextualKeyword) {
    case _index.ContextualKeyword._abstract:
      if (isBeforeToken || (0, _index.match)(_types.TokenType._class)) {
        if (isBeforeToken) (0, _index.next)();
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._abstract;
        (0, _statement.parseClass)(/* isStatement */ true, /* optionalId */ false);
        return true;
      }
      break;

    case _index.ContextualKeyword._enum:
      if (isBeforeToken || (0, _index.match)(_types.TokenType.name)) {
        if (isBeforeToken) (0, _index.next)();
        _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;
        tsParseEnumDeclaration();
        return true;
      }
      break;

    case _index.ContextualKeyword._interface:
      if (isBeforeToken || (0, _index.match)(_types.TokenType.name)) {
        // `next` is true in "export" and "declare" contexts, so we want to remove that token
        // as well.
        const oldIsType = (0, _index.pushTypeContext)(1);
        if (isBeforeToken) (0, _index.next)();
        tsParseInterfaceDeclaration();
        (0, _index.popTypeContext)(oldIsType);
        return true;
      }
      break;

    case _index.ContextualKeyword._module:
      if (isBeforeToken) (0, _index.next)();
      if ((0, _index.match)(_types.TokenType.string)) {
        const oldIsType = (0, _index.pushTypeContext)(isBeforeToken ? 2 : 1);
        tsParseAmbientExternalModuleDeclaration();
        (0, _index.popTypeContext)(oldIsType);
        return true;
      } else if (_index.next || (0, _index.match)(_types.TokenType.name)) {
        const oldIsType = (0, _index.pushTypeContext)(isBeforeToken ? 2 : 1);
        tsParseModuleOrNamespaceDeclaration();
        (0, _index.popTypeContext)(oldIsType);
        return true;
      }
      break;

    case _index.ContextualKeyword._namespace:
      if (isBeforeToken || (0, _index.match)(_types.TokenType.name)) {
        const oldIsType = (0, _index.pushTypeContext)(1);
        if (isBeforeToken) (0, _index.next)();
        tsParseModuleOrNamespaceDeclaration();
        (0, _index.popTypeContext)(oldIsType);
        return true;
      }
      break;

    case _index.ContextualKeyword._type:
      if (isBeforeToken || (0, _index.match)(_types.TokenType.name)) {
        const oldIsType = (0, _index.pushTypeContext)(1);
        if (isBeforeToken) (0, _index.next)();
        tsParseTypeAliasDeclaration();
        (0, _index.popTypeContext)(oldIsType);
        return true;
      }
      break;

    default:
      break;
  }
  return false;
}

// Returns true if there was a generic async arrow function.
function tsTryParseGenericAsyncArrowFunction() {
  const matched = tsTryParseAndCatch(() => {
    tsParseTypeParameters();
    (0, _statement.parseFunctionParams)();
    tsTryParseTypeOrTypePredicateAnnotation();
    (0, _util.expect)(_types.TokenType.arrow);
  });

  if (!matched) {
    return false;
  }

  // We don't need to be precise about the function start since it's only used if this is a
  // bodiless function, which isn't valid here.
  const functionStart = _base.state.start;
  (0, _expression.parseFunctionBody)(functionStart, false /* isGenerator */, true);
  return true;
}

function tsParseTypeArguments() {
  const oldIsType = (0, _index.pushTypeContext)(0);
  (0, _util.expect)(_types.TokenType.lessThan);
  tsParseDelimitedList(ParsingContext.TypeParametersOrArguments, tsParseType);
  (0, _util.expect)(_types.TokenType.greaterThan);
  (0, _index.popTypeContext)(oldIsType);
}

 function tsIsDeclarationStart() {
  if ((0, _index.match)(_types.TokenType.name)) {
    switch (_base.state.contextualKeyword) {
      case _index.ContextualKeyword._abstract:
      case _index.ContextualKeyword._declare:
      case _index.ContextualKeyword._enum:
      case _index.ContextualKeyword._interface:
      case _index.ContextualKeyword._module:
      case _index.ContextualKeyword._namespace:
      case _index.ContextualKeyword._type:
        return true;
      default:
        break;
    }
  }

  return false;
} exports.tsIsDeclarationStart = tsIsDeclarationStart;

// ======================================================
// OVERRIDES
// ======================================================

 function tsParseFunctionBodyAndFinish(
  functionStart,
  isGenerator,
  allowExpressionBody = null,
  funcContextId,
) {
  // For arrow functions, `parseArrow` handles the return type itself.
  if (!allowExpressionBody && (0, _index.match)(_types.TokenType.colon)) {
    tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);
  }

  // The original code checked the node type to make sure this function type allows a missing
  // body, but we skip that to avoid sending around the node type. We instead just use the
  // allowExpressionBody boolean to make sure it's not an arrow function.
  if (!allowExpressionBody && !(0, _index.match)(_types.TokenType.braceL) && (0, _util.isLineTerminator)()) {
    // Retroactively mark the function declaration as a type.
    let i = _base.state.tokens.length - 1;
    while (
      i >= 0 &&
      (_base.state.tokens[i].start >= functionStart ||
        _base.state.tokens[i].type === _types.TokenType._default ||
        _base.state.tokens[i].type === _types.TokenType._export)
    ) {
      _base.state.tokens[i].isType = true;
      i--;
    }
    return;
  }

  (0, _expression.parseFunctionBody)(functionStart, isGenerator, allowExpressionBody, funcContextId);
} exports.tsParseFunctionBodyAndFinish = tsParseFunctionBodyAndFinish;

 function tsParseSubscript(
  startPos,
  noCalls,
  stopState,
) {
  if (!(0, _util.hasPrecedingLineBreak)() && (0, _index.eat)(_types.TokenType.bang)) {
    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType.nonNullAssertion;
    return;
  }

  if (!noCalls && (0, _index.match)(_types.TokenType.lessThan)) {
    if ((0, _expression.atPossibleAsync)()) {
      // Almost certainly this is a generic async function `async <T>() => ...
      // But it might be a call with a type argument `async<T>();`
      const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();
      if (asyncArrowFn) {
        return;
      }
    }

    // May be passing type arguments. But may just be the `<` operator.
    const typeArguments = tsTryParseTypeArgumentsInExpression(); // Also eats the "("
    if (typeArguments) {
      // possibleAsync always false here, because we would have handled it above.
      (0, _expression.parseCallExpressionArguments)(_types.TokenType.parenR);
    }
  }
  (0, _expression.baseParseSubscript)(startPos, noCalls, stopState);
} exports.tsParseSubscript = tsParseSubscript;

 function tsStartParseNewArguments() {
  if ((0, _index.match)(_types.TokenType.lessThan)) {
    // tsTryParseAndCatch is expensive, so avoid if not necessary.
    // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.
    tsTryParseAndCatch(() => {
      _base.state.type = _types.TokenType.typeParameterStart;
      tsParseTypeArguments();
      if (!(0, _index.match)(_types.TokenType.parenL)) {
        (0, _util.unexpected)();
      }
    });
  }
} exports.tsStartParseNewArguments = tsStartParseNewArguments;

 function tsTryParseExport() {
  if ((0, _index.match)(_types.TokenType._import)) {
    // `export import A = B;`
    (0, _util.expect)(_types.TokenType._import);
    tsParseImportEqualsDeclaration();
    return true;
  } else if ((0, _index.eat)(_types.TokenType.eq)) {
    // `export = x;`
    (0, _expression.parseExpression)();
    (0, _util.semicolon)();
    return true;
  } else if ((0, _util.eatContextual)(_index.ContextualKeyword._as)) {
    // `export as namespace A;`
    // See `parseNamespaceExportDeclaration` in TypeScript's own parser
    (0, _util.expectContextual)(_index.ContextualKeyword._namespace);
    (0, _expression.parseIdentifier)();
    (0, _util.semicolon)();
    return true;
  } else {
    return false;
  }
} exports.tsTryParseExport = tsTryParseExport;

 function tsTryParseExportDefaultExpression() {
  if ((0, _util.isContextual)(_index.ContextualKeyword._abstract) && (0, _index.lookaheadType)() === _types.TokenType._class) {
    _base.state.type = _types.TokenType._abstract;
    (0, _index.next)(); // Skip "abstract"
    (0, _statement.parseClass)(true, true);
    return true;
  }
  return false;
} exports.tsTryParseExportDefaultExpression = tsTryParseExportDefaultExpression;

 function tsTryParseStatementContent() {
  if (_base.state.type === _types.TokenType._const) {
    const ahead = (0, _index.lookaheadTypeAndKeyword)();
    if (ahead.type === _types.TokenType.name && ahead.contextualKeyword === _index.ContextualKeyword._enum) {
      (0, _util.expect)(_types.TokenType._const);
      (0, _util.expectContextual)(_index.ContextualKeyword._enum);
      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._enum;
      tsParseEnumDeclaration();
      return true;
    }
  }
  return false;
} exports.tsTryParseStatementContent = tsTryParseStatementContent;

 function tsParseAccessModifier() {
  tsParseModifier([
    _index.ContextualKeyword._public,
    _index.ContextualKeyword._protected,
    _index.ContextualKeyword._private,
  ]);
} exports.tsParseAccessModifier = tsParseAccessModifier;

 function tsTryParseClassMemberWithIsStatic(
  isStatic,
  classContextId,
) {
  let isAbstract = false;
  let isReadonly = false;

  const mod = tsParseModifier([_index.ContextualKeyword._abstract, _index.ContextualKeyword._readonly]);
  switch (mod) {
    case _index.ContextualKeyword._readonly:
      isReadonly = true;
      isAbstract = !!tsParseModifier([_index.ContextualKeyword._abstract]);
      break;
    case _index.ContextualKeyword._abstract:
      isAbstract = true;
      isReadonly = !!tsParseModifier([_index.ContextualKeyword._readonly]);
      break;
    default:
      break;
  }

  // We no longer check for public/private/etc, but tsTryParseIndexSignature should just return
  // false in that case for valid code.
  if (!isAbstract && !isStatic) {
    const found = tsTryParseIndexSignature();
    if (found) {
      return true;
    }
  }

  if (isReadonly) {
    // Must be a property (if not an index signature).
    (0, _statement.parseClassPropertyName)(classContextId);
    (0, _statement.parsePostMemberNameModifiers)();
    (0, _statement.parseClassProperty)();
    return true;
  }
  return false;
} exports.tsTryParseClassMemberWithIsStatic = tsTryParseClassMemberWithIsStatic;

// Note: The reason we do this in `parseIdentifierStatement` and not `parseStatement`
// is that e.g. `type()` is valid JS, so we must try parsing that first.
// If it's really a type, we will parse `type` as the statement, and can correct it here
// by parsing the rest.
 function tsParseIdentifierStatement(contextualKeyword) {
  const matched = tsParseExpressionStatement(contextualKeyword);
  if (!matched) {
    (0, _util.semicolon)();
  }
} exports.tsParseIdentifierStatement = tsParseIdentifierStatement;

 function tsParseExportDeclaration() {
  // "export declare" is equivalent to just "export".
  const isDeclare = (0, _util.eatContextual)(_index.ContextualKeyword._declare);
  if (isDeclare) {
    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._declare;
  }

  let matchedDeclaration = false;
  if ((0, _index.match)(_types.TokenType.name)) {
    if (isDeclare) {
      const oldIsType = (0, _index.pushTypeContext)(2);
      matchedDeclaration = tsTryParseExportDeclaration();
      (0, _index.popTypeContext)(oldIsType);
    } else {
      matchedDeclaration = tsTryParseExportDeclaration();
    }
  }
  if (!matchedDeclaration) {
    if (isDeclare) {
      const oldIsType = (0, _index.pushTypeContext)(2);
      (0, _statement.parseStatement)(true);
      (0, _index.popTypeContext)(oldIsType);
    } else {
      (0, _statement.parseStatement)(true);
    }
  }
} exports.tsParseExportDeclaration = tsParseExportDeclaration;

 function tsAfterParseClassSuper(hasSuper) {
  if (hasSuper && (0, _index.match)(_types.TokenType.lessThan)) {
    tsParseTypeArguments();
  }
  if ((0, _util.eatContextual)(_index.ContextualKeyword._implements)) {
    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._implements;
    const oldIsType = (0, _index.pushTypeContext)(1);
    tsParseHeritageClause();
    (0, _index.popTypeContext)(oldIsType);
  }
} exports.tsAfterParseClassSuper = tsAfterParseClassSuper;

 function tsStartParseObjPropValue() {
  if ((0, _index.match)(_types.TokenType.lessThan)) {
    throw new Error("TODO");
  }
} exports.tsStartParseObjPropValue = tsStartParseObjPropValue;

 function tsStartParseFunctionParams() {
  tsTryParseTypeParameters();
} exports.tsStartParseFunctionParams = tsStartParseFunctionParams;

// `let x: number;`
 function tsAfterParseVarHead() {
  (0, _index.eat)(_types.TokenType.bang);
  tsTryParseTypeAnnotation();
} exports.tsAfterParseVarHead = tsAfterParseVarHead;

// parse the return type of an async arrow function - let foo = (async (): number => {});
 function tsStartParseAsyncArrowFromCallExpression() {
  if ((0, _index.match)(_types.TokenType.colon)) {
    tsParseTypeAnnotation();
  }
} exports.tsStartParseAsyncArrowFromCallExpression = tsStartParseAsyncArrowFromCallExpression;

// Returns true if the expression was an arrow function.
 function tsParseMaybeAssign(
  noIn = null,
  afterLeftParse,
) {
  // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.

  let jsxError = null;

  if ((0, _index.match)(_types.TokenType.lessThan) && _base.isJSXEnabled) {
    // Prefer to parse JSX if possible. But may be an arrow fn.
    const snapshot = _base.state.snapshot();
    try {
      return (0, _expression.baseParseMaybeAssign)(noIn, afterLeftParse);
    } catch (err) {
      if (!(err instanceof SyntaxError)) {
        // istanbul ignore next: no such error is expected
        throw err;
      }

      _base.state.restoreFromSnapshot(snapshot);
      _base.state.type = _types.TokenType.typeParameterStart;
      jsxError = err;
    }
  }

  if (jsxError === null && !(0, _index.match)(_types.TokenType.lessThan)) {
    return (0, _expression.baseParseMaybeAssign)(noIn, afterLeftParse);
  }

  // Either way, we're looking at a '<': tt.typeParameterStart or relational.

  let wasArrow = false;
  const snapshot = _base.state.snapshot();
  try {
    // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.
    const oldIsType = (0, _index.pushTypeContext)(0);
    tsParseTypeParameters();
    (0, _index.popTypeContext)(oldIsType);
    wasArrow = (0, _expression.baseParseMaybeAssign)(noIn, afterLeftParse);
    if (!wasArrow) {
      (0, _util.unexpected)(); // Go to the catch block (needs a SyntaxError).
    }
  } catch (err) {
    if (!(err instanceof SyntaxError)) {
      // istanbul ignore next: no such error is expected
      throw err;
    }

    if (jsxError) {
      throw jsxError;
    }

    // Try parsing a type cast instead of an arrow function.
    // This will never happen outside of JSX.
    // (Because in JSX the '<' should be a jsxTagStart and not a relational.
    assert(!_base.isJSXEnabled);
    // Parsing an arrow function failed, so try a type cast.
    _base.state.restoreFromSnapshot(snapshot);
    // This will start with a type assertion (via parseMaybeUnary).
    // But don't directly call `tsParseTypeAssertion` because we want to handle any binary after it.
    return (0, _expression.baseParseMaybeAssign)(noIn, afterLeftParse);
  }
  return wasArrow;
} exports.tsParseMaybeAssign = tsParseMaybeAssign;

 function tsParseArrow() {
  if ((0, _index.match)(_types.TokenType.colon)) {
    // This is different from how the TS parser does it.
    // TS uses lookahead. Babylon parses it as a parenthesized expression and converts.
    const snapshot = _base.state.snapshot();
    try {
      tsParseTypeOrTypePredicateAnnotation(_types.TokenType.colon);
      if ((0, _util.canInsertSemicolon)()) (0, _util.unexpected)();
      if (!(0, _index.match)(_types.TokenType.arrow)) (0, _util.unexpected)();
    } catch (err) {
      if (err instanceof SyntaxError) {
        _base.state.restoreFromSnapshot(snapshot);
      } else {
        // istanbul ignore next: no such error is expected
        throw err;
      }
    }
  }
  return (0, _index.eat)(_types.TokenType.arrow);
} exports.tsParseArrow = tsParseArrow;

// Allow type annotations inside of a parameter list.
 function tsParseAssignableListItemTypes() {
  const oldIsType = (0, _index.pushTypeContext)(0);
  (0, _index.eat)(_types.TokenType.question);
  tsTryParseTypeAnnotation();
  (0, _index.popTypeContext)(oldIsType);
} exports.tsParseAssignableListItemTypes = tsParseAssignableListItemTypes;
