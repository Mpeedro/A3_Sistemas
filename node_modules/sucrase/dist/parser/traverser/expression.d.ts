import { TokenType } from "../tokenizer/types";
export declare class StopState {
    stop: boolean;
    constructor(stop: boolean);
}
export declare function parseExpression(noIn?: boolean): void;
export declare function parseMaybeAssign(noIn?: boolean | null, afterLeftParse?: Function): boolean;
export declare function baseParseMaybeAssign(noIn?: boolean | null, afterLeftParse?: Function): boolean;
export declare function baseParseConditional(noIn: boolean | null, startPos: number): void;
export declare function parseMaybeUnary(): boolean;
export declare function parseExprSubscripts(): boolean;
export declare function baseParseSubscripts(startPos: number, noCalls?: boolean | null): void;
/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */
export declare function baseParseSubscript(startPos: number, noCalls: boolean | null, stopState: StopState): void;
export declare function atPossibleAsync(): boolean;
export declare function parseCallExpressionArguments(close: TokenType): void;
export declare function parseExprAtom(): boolean;
export declare function parseLiteral(): void;
export declare function parseParenExpression(): void;
export declare function parseArrow(): boolean;
export declare function parseObj(isPattern: boolean, isBlockScope: boolean): void;
export declare function parsePropertyName(objectContextId: number): void;
export declare function parseMethod(functionStart: number, isGenerator: boolean, isConstructor: boolean): void;
export declare function parseArrowExpression(functionStart: number, startTokenIndex: number): void;
export declare function parseFunctionBodyAndFinish(functionStart: number, isGenerator: boolean, allowExpressionBody?: boolean | null, funcContextId?: number): void;
export declare function parseFunctionBody(functionStart: number, isGenerator: boolean, allowExpression: boolean | null, funcContextId?: number): void;
export declare function parseIdentifier(): void;
