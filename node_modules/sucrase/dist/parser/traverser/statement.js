"use strict"; function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } } function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }Object.defineProperty(exports, "__esModule", {value: true});/* eslint max-len: 0 */

var _index = require('../index');















var _flow = require('../plugins/flow');















var _typescript = require('../plugins/typescript');








var _index3 = require('../tokenizer/index');
var _state = require('../tokenizer/state');
var _types = require('../tokenizer/types');
var _base = require('./base');











var _expression = require('./expression');
var _lval = require('./lval');









var _util = require('./util');

 function parseTopLevel() {
  parseBlockBody(true, _types.TokenType.eof);
  _base.state.scopes.push(new (0, _state.Scope)(0, _base.state.tokens.length, true));
  return new (0, _index.File)(_base.state.tokens, _base.state.scopes);
} exports.parseTopLevel = parseTopLevel;

// Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.

 function parseStatement(declaration, topLevel = false) {
  if (_base.isFlowEnabled) {
    if ((0, _flow.flowTryParseStatement)()) {
      return;
    }
  }
  if ((0, _index3.match)(_types.TokenType.at)) {
    parseDecorators();
  }
  parseStatementContent(declaration, topLevel);
} exports.parseStatement = parseStatement;

function parseStatementContent(declaration, topLevel) {
  if (_base.isTypeScriptEnabled) {
    if ((0, _typescript.tsTryParseStatementContent)()) {
      return;
    }
  }

  const starttype = _base.state.type;

  // Most types of statements are recognized by the keyword they
  // start with. Many are trivial to parse, some require a bit of
  // complexity.

  switch (starttype) {
    case _types.TokenType._break:
    case _types.TokenType._continue:
      parseBreakContinueStatement();
      return;
    case _types.TokenType._debugger:
      parseDebuggerStatement();
      return;
    case _types.TokenType._do:
      parseDoStatement();
      return;
    case _types.TokenType._for:
      parseForStatement();
      return;
    case _types.TokenType._function:
      if ((0, _index3.lookaheadType)() === _types.TokenType.dot) break;
      if (!declaration) (0, _util.unexpected)();
      parseFunctionStatement();
      return;

    case _types.TokenType._class:
      if (!declaration) (0, _util.unexpected)();
      parseClass(true);
      return;

    case _types.TokenType._if:
      parseIfStatement();
      return;
    case _types.TokenType._return:
      parseReturnStatement();
      return;
    case _types.TokenType._switch:
      parseSwitchStatement();
      return;
    case _types.TokenType._throw:
      parseThrowStatement();
      return;
    case _types.TokenType._try:
      parseTryStatement();
      return;

    case _types.TokenType._let:
    case _types.TokenType._const:
      if (!declaration) (0, _util.unexpected)(); // NOTE: falls through to _var

    case _types.TokenType._var:
      parseVarStatement(starttype);
      return;

    case _types.TokenType._while:
      parseWhileStatement();
      return;
    case _types.TokenType.braceL:
      parseBlock();
      return;
    case _types.TokenType.semi:
      parseEmptyStatement();
      return;
    case _types.TokenType._export:
    case _types.TokenType._import: {
      const nextType = (0, _index3.lookaheadType)();
      if (nextType === _types.TokenType.parenL || nextType === _types.TokenType.dot) {
        break;
      }
      (0, _index3.next)();
      if (starttype === _types.TokenType._import) {
        parseImport();
      } else {
        parseExport();
      }
      return;
    }
    case _types.TokenType.name:
      if (_base.state.contextualKeyword === _index3.ContextualKeyword._async) {
        const functionStart = _base.state.start;
        // peek ahead and see if next token is a function
        const snapshot = _base.state.snapshot();
        (0, _index3.next)();
        if ((0, _index3.match)(_types.TokenType._function) && !(0, _util.canInsertSemicolon)()) {
          (0, _util.expect)(_types.TokenType._function);
          parseFunction(functionStart, true, false);
          return;
        } else {
          _base.state.restoreFromSnapshot(snapshot);
        }
      }
    default:
      // Do nothing.
      break;
  }

  // If the statement does not start with a statement keyword or a
  // brace, it's an ExpressionStatement or LabeledStatement. We
  // simply start parsing an expression, and afterwards, if the
  // next token is a colon and the expression was a simple
  // Identifier node, we switch to interpreting it as a label.
  const initialTokensLength = _base.state.tokens.length;
  (0, _expression.parseExpression)();
  let simpleName = null;
  if (_base.state.tokens.length === initialTokensLength + 1) {
    const token = _base.state.tokens[_base.state.tokens.length - 1];
    if (token.type === _types.TokenType.name) {
      simpleName = token.contextualKeyword;
    }
  }
  if (simpleName == null) {
    (0, _util.semicolon)();
    return;
  }
  if ((0, _index3.eat)(_types.TokenType.colon)) {
    parseLabeledStatement();
  } else {
    // This was an identifier, so we might want to handle flow/typescript-specific cases.
    parseIdentifierStatement(simpleName);
  }
}

 function parseDecorators() {
  while ((0, _index3.match)(_types.TokenType.at)) {
    parseDecorator();
  }
} exports.parseDecorators = parseDecorators;

function parseDecorator() {
  (0, _index3.next)();
  if ((0, _index3.eat)(_types.TokenType.parenL)) {
    (0, _expression.parseExpression)();
    (0, _util.expect)(_types.TokenType.parenR);
  } else {
    (0, _expression.parseIdentifier)();
    while ((0, _index3.eat)(_types.TokenType.dot)) {
      (0, _expression.parseIdentifier)();
    }
  }
  if ((0, _index3.eat)(_types.TokenType.parenL)) {
    (0, _expression.parseCallExpressionArguments)(_types.TokenType.parenR);
  }
}

function parseBreakContinueStatement() {
  (0, _index3.next)();
  if (!(0, _util.isLineTerminator)()) {
    (0, _expression.parseIdentifier)();
    (0, _util.semicolon)();
  }
}

function parseDebuggerStatement() {
  (0, _index3.next)();
  (0, _util.semicolon)();
}

function parseDoStatement() {
  (0, _index3.next)();
  parseStatement(false);
  (0, _util.expect)(_types.TokenType._while);
  (0, _expression.parseParenExpression)();
  (0, _index3.eat)(_types.TokenType.semi);
}

function parseForStatement() {
  const startTokenIndex = _base.state.tokens.length;
  parseAmbiguousForStatement();
  const endTokenIndex = _base.state.tokens.length;
  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));
}

// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.
function parseAmbiguousForStatement() {
  (0, _index3.next)();

  let forAwait = false;
  if ((0, _util.isContextual)(_index3.ContextualKeyword._await)) {
    forAwait = true;
    (0, _index3.next)();
  }
  (0, _util.expect)(_types.TokenType.parenL);

  if ((0, _index3.match)(_types.TokenType.semi)) {
    if (forAwait) {
      (0, _util.unexpected)();
    }
    parseFor();
    return;
  }

  if ((0, _index3.match)(_types.TokenType._var) || (0, _index3.match)(_types.TokenType._let) || (0, _index3.match)(_types.TokenType._const)) {
    const varKind = _base.state.type;
    (0, _index3.next)();
    parseVar(true, varKind);
    if ((0, _index3.match)(_types.TokenType._in) || (0, _util.isContextual)(_index3.ContextualKeyword._of)) {
      parseForIn(forAwait);
      return;
    }
    parseFor();
    return;
  }

  (0, _expression.parseExpression)(true);
  if ((0, _index3.match)(_types.TokenType._in) || (0, _util.isContextual)(_index3.ContextualKeyword._of)) {
    parseForIn(forAwait);
    return;
  }
  if (forAwait) {
    (0, _util.unexpected)();
  }
  parseFor();
}

function parseFunctionStatement() {
  const functionStart = _base.state.start;
  (0, _index3.next)();
  parseFunction(functionStart, true);
}

function parseIfStatement() {
  (0, _index3.next)();
  (0, _expression.parseParenExpression)();
  parseStatement(false);
  if ((0, _index3.eat)(_types.TokenType._else)) {
    parseStatement(false);
  }
}

function parseReturnStatement() {
  (0, _index3.next)();

  // In `return` (and `break`/`continue`), the keywords with
  // optional arguments, we eagerly look for a semicolon or the
  // possibility to insert one.

  if (!(0, _util.isLineTerminator)()) {
    (0, _expression.parseExpression)();
    (0, _util.semicolon)();
  }
}

function parseSwitchStatement() {
  (0, _index3.next)();
  (0, _expression.parseParenExpression)();
  const startTokenIndex = _base.state.tokens.length;
  (0, _util.expect)(_types.TokenType.braceL);

  // Don't bother validation; just go through any sequence of cases, defaults, and statements.
  while (!(0, _index3.match)(_types.TokenType.braceR)) {
    if ((0, _index3.match)(_types.TokenType._case) || (0, _index3.match)(_types.TokenType._default)) {
      const isCase = (0, _index3.match)(_types.TokenType._case);
      (0, _index3.next)();
      if (isCase) {
        (0, _expression.parseExpression)();
      }
      (0, _util.expect)(_types.TokenType.colon);
    } else {
      parseStatement(true);
    }
  }
  (0, _index3.next)(); // Closing brace
  const endTokenIndex = _base.state.tokens.length;
  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, false));
}

function parseThrowStatement() {
  (0, _index3.next)();
  (0, _expression.parseExpression)();
  (0, _util.semicolon)();
}

function parseTryStatement() {
  (0, _index3.next)();

  parseBlock();

  if ((0, _index3.match)(_types.TokenType._catch)) {
    (0, _index3.next)();
    let catchBindingStartTokenIndex = null;
    if ((0, _index3.match)(_types.TokenType.parenL)) {
      catchBindingStartTokenIndex = _base.state.tokens.length;
      (0, _util.expect)(_types.TokenType.parenL);
      (0, _lval.parseBindingAtom)(true /* isBlockScope */);
      (0, _util.expect)(_types.TokenType.parenR);
    }
    parseBlock();
    if (catchBindingStartTokenIndex != null) {
      // We need a special scope for the catch binding which includes the binding itself and the
      // catch block.
      const endTokenIndex = _base.state.tokens.length;
      _base.state.scopes.push(new (0, _state.Scope)(catchBindingStartTokenIndex, endTokenIndex, false));
    }
  }
  if ((0, _index3.eat)(_types.TokenType._finally)) {
    parseBlock();
  }
}

 function parseVarStatement(kind) {
  (0, _index3.next)();
  parseVar(false, kind);
  (0, _util.semicolon)();
} exports.parseVarStatement = parseVarStatement;

function parseWhileStatement() {
  (0, _index3.next)();
  (0, _expression.parseParenExpression)();
  parseStatement(false);
}

function parseEmptyStatement() {
  (0, _index3.next)();
}

function parseLabeledStatement() {
  parseStatement(true);
}

/**
 * Parse a statement starting with an identifier of the given name. Subclasses match on the name
 * to handle statements like "declare".
 */
function parseIdentifierStatement(contextualKeyword) {
  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsParseIdentifierStatement)(contextualKeyword);
  } else if (_base.isFlowEnabled) {
    (0, _flow.flowParseIdentifierStatement)(contextualKeyword);
  } else {
    (0, _util.semicolon)();
  }
}

// Parse a semicolon-enclosed block of statements, handling `"use
// strict"` declarations when `allowStrict` is true (used for
// function bodies).

 function parseBlock(
  allowDirectives = false,
  isFunctionScope = false,
  contextId,
) {
  const startTokenIndex = _base.state.tokens.length;
  (0, _util.expect)(_types.TokenType.braceL);
  if (contextId) {
    _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
  }
  parseBlockBody(false, _types.TokenType.braceR);
  if (contextId) {
    _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
  }
  const endTokenIndex = _base.state.tokens.length;
  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, isFunctionScope));
} exports.parseBlock = parseBlock;

 function parseBlockBody(topLevel, end) {
  while (!(0, _index3.eat)(end)) {
    parseStatement(true, topLevel);
  }
} exports.parseBlockBody = parseBlockBody;

// Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.

function parseFor() {
  (0, _util.expect)(_types.TokenType.semi);
  if (!(0, _index3.match)(_types.TokenType.semi)) {
    (0, _expression.parseExpression)();
  }
  (0, _util.expect)(_types.TokenType.semi);
  if (!(0, _index3.match)(_types.TokenType.parenR)) {
    (0, _expression.parseExpression)();
  }
  (0, _util.expect)(_types.TokenType.parenR);
  parseStatement(false);
}

// Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.

function parseForIn(forAwait) {
  if (forAwait) {
    (0, _util.eatContextual)(_index3.ContextualKeyword._of);
  } else {
    (0, _index3.next)();
  }
  (0, _expression.parseExpression)();
  (0, _util.expect)(_types.TokenType.parenR);
  parseStatement(false);
}

// Parse a list of variable declarations.

function parseVar(isFor, kind) {
  while (true) {
    const isBlockScope = kind === _types.TokenType._const || kind === _types.TokenType._let;
    parseVarHead(isBlockScope);
    if ((0, _index3.eat)(_types.TokenType.eq)) {
      (0, _expression.parseMaybeAssign)(isFor);
    }
    if (!(0, _index3.eat)(_types.TokenType.comma)) break;
  }
}

function parseVarHead(isBlockScope) {
  (0, _lval.parseBindingAtom)(isBlockScope);
  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsAfterParseVarHead)();
  } else if (_base.isFlowEnabled) {
    (0, _flow.flowAfterParseVarHead)();
  }
}

// Parse a function declaration or literal (depending on the
// `isStatement` parameter).

 function parseFunction(
  functionStart,
  isStatement,
  allowExpressionBody,
  optionalId,
) {
  let isGenerator = false;
  if ((0, _index3.match)(_types.TokenType.star)) {
    isGenerator = true;
    (0, _index3.next)();
  }

  if (isStatement && !optionalId && !(0, _index3.match)(_types.TokenType.name) && !(0, _index3.match)(_types.TokenType._yield)) {
    (0, _util.unexpected)();
  }

  let nameScopeStartTokenIndex = null;

  if ((0, _index3.match)(_types.TokenType.name)) {
    // Expression-style functions should limit their name's scope to the function body, so we make
    // a new function scope to enforce that.
    if (!isStatement) {
      nameScopeStartTokenIndex = _base.state.tokens.length;
    }
    (0, _lval.parseBindingIdentifier)();
    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.FunctionScopedDeclaration;
  }

  const startTokenIndex = _base.state.tokens.length;
  parseFunctionParams();
  (0, _expression.parseFunctionBodyAndFinish)(functionStart, isGenerator, allowExpressionBody);
  const endTokenIndex = _base.state.tokens.length;
  // In addition to the block scope of the function body, we need a separate function-style scope
  // that includes the params.
  _base.state.scopes.push(new (0, _state.Scope)(startTokenIndex, endTokenIndex, true));
  if (nameScopeStartTokenIndex !== null) {
    _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, true));
  }
} exports.parseFunction = parseFunction;

 function parseFunctionParams(allowModifiers, funcContextId) {
  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsStartParseFunctionParams)();
  } else if (_base.isFlowEnabled) {
    (0, _flow.flowStartParseFunctionParams)();
  }

  (0, _util.expect)(_types.TokenType.parenL);
  if (funcContextId) {
    _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;
  }
  (0, _lval.parseBindingList)(_types.TokenType.parenR, false /* isBlockScope */, false /* allowEmpty */, allowModifiers);
  if (funcContextId) {
    _base.state.tokens[_base.state.tokens.length - 1].contextId = funcContextId;
  }
} exports.parseFunctionParams = parseFunctionParams;

// Parse a class declaration or literal (depending on the
// `isStatement` parameter).

 function parseClass(isStatement, optionalId = false) {
  // Put a context ID on the class keyword, the open-brace, and the close-brace, so that later
  // code can easily navigate to meaningful points on the class.
  const contextId = (0, _base.getNextContextId)();

  (0, _index3.next)();
  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
  _base.state.tokens[_base.state.tokens.length - 1].isExpression = !isStatement;
  // Like with functions, we declare a special "name scope" from the start of the name to the end
  // of the class, but only with expression-style classes, to represent the fact that the name is
  // available to the body of the class but not an outer declaration.
  let nameScopeStartTokenIndex = null;
  if (!isStatement) {
    nameScopeStartTokenIndex = _base.state.tokens.length;
  }
  parseClassId(isStatement, optionalId);
  parseClassSuper();
  const openBraceIndex = _base.state.tokens.length;
  parseClassBody(contextId);
  _base.state.tokens[openBraceIndex].contextId = contextId;
  _base.state.tokens[_base.state.tokens.length - 1].contextId = contextId;
  if (nameScopeStartTokenIndex !== null) {
    const endTokenIndex = _base.state.tokens.length;
    _base.state.scopes.push(new (0, _state.Scope)(nameScopeStartTokenIndex, endTokenIndex, false));
  }
} exports.parseClass = parseClass;

function isClassProperty() {
  return (0, _index3.match)(_types.TokenType.eq) || (0, _index3.match)(_types.TokenType.semi) || (0, _index3.match)(_types.TokenType.braceR) || (0, _index3.match)(_types.TokenType.bang) || (0, _index3.match)(_types.TokenType.colon);
}

function isClassMethod() {
  return (0, _index3.match)(_types.TokenType.parenL) || (0, _index3.match)(_types.TokenType.lessThan);
}

function parseClassBody(classContextId) {
  (0, _util.expect)(_types.TokenType.braceL);

  while (!(0, _index3.eat)(_types.TokenType.braceR)) {
    if ((0, _index3.eat)(_types.TokenType.semi)) {
      continue;
    }

    if ((0, _index3.match)(_types.TokenType.at)) {
      parseDecorator();
      continue;
    }
    const memberStart = _base.state.start;
    parseClassMember(memberStart, classContextId);
  }
}

function parseClassMember(memberStart, classContextId) {
  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsParseAccessModifier)();
  }
  let isStatic = false;
  if ((0, _index3.match)(_types.TokenType.name) && _base.state.contextualKeyword === _index3.ContextualKeyword._static) {
    (0, _expression.parseIdentifier)(); // eats 'static'
    if (isClassMethod()) {
      parseClassMethod(memberStart, false, /* isConstructor */ false);
      return;
    } else if (isClassProperty()) {
      parseClassProperty();
      return;
    }
    // otherwise something static
    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._static;
    isStatic = true;
  }

  parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);
}

function parseClassMemberWithIsStatic(
  memberStart,
  isStatic,
  classContextId,
) {
  if (_base.isTypeScriptEnabled) {
    if ((0, _typescript.tsTryParseClassMemberWithIsStatic)(isStatic, classContextId)) {
      return;
    }
  }
  if ((0, _index3.eat)(_types.TokenType.star)) {
    // a generator
    parseClassPropertyName(classContextId);
    parseClassMethod(memberStart, true, /* isConstructor */ false);
    return;
  }

  // Get the identifier name so we can tell if it's actually a keyword like "async", "get", or
  // "set".
  parseClassPropertyName(classContextId);
  let isConstructor = false;
  const token = _base.state.tokens[_base.state.tokens.length - 1];
  // We allow "constructor" as either an identifier or a string.
  if (token.contextualKeyword === _index3.ContextualKeyword._constructor) {
    isConstructor = true;
  }
  parsePostMemberNameModifiers();

  if (isClassMethod()) {
    parseClassMethod(memberStart, false, isConstructor);
  } else if (isClassProperty()) {
    parseClassProperty();
  } else if (token.contextualKeyword === _index3.ContextualKeyword._async && !(0, _util.isLineTerminator)()) {
    _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._async;
    // an async method
    const isGenerator = (0, _index3.match)(_types.TokenType.star);
    if (isGenerator) {
      (0, _index3.next)();
    }

    // The so-called parsed name would have been "async": get the real name.
    parseClassPropertyName(classContextId);
    parseClassMethod(memberStart, isGenerator, false /* isConstructor */);
  } else if (
    (token.contextualKeyword === _index3.ContextualKeyword._get ||
      token.contextualKeyword === _index3.ContextualKeyword._set) &&
    !((0, _util.isLineTerminator)() && (0, _index3.match)(_types.TokenType.star))
  ) {
    if (token.contextualKeyword === _index3.ContextualKeyword._get) {
      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._get;
    } else {
      _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._set;
    }
    // `get\n*` is an uninitialized property named 'get' followed by a generator.
    // a getter or setter
    // The so-called parsed name would have been "get/set": get the real name.
    parseClassPropertyName(classContextId);
    parseClassMethod(memberStart, false, /* isConstructor */ false);
  } else if ((0, _util.isLineTerminator)()) {
    // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)
    parseClassProperty();
  } else {
    (0, _util.unexpected)();
  }
}

function parseClassMethod(
  functionStart,
  isGenerator,
  isConstructor,
) {
  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsTryParseTypeParameters)();
  } else if (_base.isFlowEnabled) {
    if ((0, _index3.match)(_types.TokenType.lessThan)) {
      (0, _flow.flowParseTypeParameterDeclaration)();
    }
  }
  (0, _expression.parseMethod)(functionStart, isGenerator, isConstructor);
}

// Return the name of the class property, if it is a simple identifier.
 function parseClassPropertyName(classContextId) {
  (0, _expression.parsePropertyName)(classContextId);
} exports.parseClassPropertyName = parseClassPropertyName;

 function parsePostMemberNameModifiers() {
  if (_base.isTypeScriptEnabled) {
    (0, _index3.eat)(_types.TokenType.question);
  }
} exports.parsePostMemberNameModifiers = parsePostMemberNameModifiers;

 function parseClassProperty() {
  if (_base.isTypeScriptEnabled) {
    (0, _index3.eat)(_types.TokenType.bang);
    (0, _typescript.tsTryParseTypeAnnotation)();
  } else if (_base.isFlowEnabled) {
    if ((0, _index3.match)(_types.TokenType.colon)) {
      (0, _flow.flowParseTypeAnnotation)();
    }
  }

  if ((0, _index3.match)(_types.TokenType.eq)) {
    const equalsTokenIndex = _base.state.tokens.length;
    (0, _index3.next)();
    (0, _expression.parseMaybeAssign)();
    _base.state.tokens[equalsTokenIndex].rhsEndIndex = _base.state.tokens.length;
  }
  (0, _util.semicolon)();
} exports.parseClassProperty = parseClassProperty;

function parseClassId(isStatement, optionalId = false) {
  if (
    _base.isTypeScriptEnabled &&
    (!isStatement || optionalId) &&
    (0, _util.isContextual)(_index3.ContextualKeyword._implements)
  ) {
    return;
  }

  if ((0, _index3.match)(_types.TokenType.name)) {
    (0, _expression.parseIdentifier)();
    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.BlockScopedDeclaration;
  }

  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsTryParseTypeParameters)();
  } else if (_base.isFlowEnabled) {
    if ((0, _index3.match)(_types.TokenType.lessThan)) {
      (0, _flow.flowParseTypeParameterDeclaration)();
    }
  }
}

// Returns true if there was a superclass.
function parseClassSuper() {
  let hasSuper = false;
  if ((0, _index3.eat)(_types.TokenType._extends)) {
    (0, _expression.parseExprSubscripts)();
    hasSuper = true;
  } else {
    hasSuper = false;
  }
  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsAfterParseClassSuper)(hasSuper);
  } else if (_base.isFlowEnabled) {
    (0, _flow.flowAfterParseClassSuper)(hasSuper);
  }
}

// Parses module export declaration.

 function parseExport() {
  if (_base.isTypeScriptEnabled) {
    if ((0, _typescript.tsTryParseExport)()) {
      return;
    }
  }
  // export * from '...'
  if (shouldParseExportStar()) {
    parseExportStar();
  } else if (isExportDefaultSpecifier()) {
    // export default from
    (0, _expression.parseIdentifier)();
    if ((0, _index3.match)(_types.TokenType.comma) && (0, _index3.lookaheadType)() === _types.TokenType.star) {
      (0, _util.expect)(_types.TokenType.comma);
      (0, _util.expect)(_types.TokenType.star);
      (0, _util.expectContextual)(_index3.ContextualKeyword._as);
      (0, _expression.parseIdentifier)();
    } else {
      parseExportSpecifiersMaybe();
    }
    parseExportFrom();
  } else if ((0, _index3.eat)(_types.TokenType._default)) {
    // export default ...
    parseExportDefaultExpression();
  } else if (shouldParseExportDeclaration()) {
    parseExportDeclaration();
  } else {
    // export { x, y as z } [from '...']
    parseExportSpecifiers();
    parseExportFrom();
  }
} exports.parseExport = parseExport;

function parseExportDefaultExpression() {
  if (_base.isTypeScriptEnabled) {
    if ((0, _typescript.tsTryParseExportDefaultExpression)()) {
      return;
    }
  }
  const functionStart = _base.state.start;
  if ((0, _index3.eat)(_types.TokenType._function)) {
    parseFunction(functionStart, true, false, true);
  } else if ((0, _util.isContextual)(_index3.ContextualKeyword._async) && (0, _index3.lookaheadType)() === _types.TokenType._function) {
    // async function declaration
    (0, _util.eatContextual)(_index3.ContextualKeyword._async);
    (0, _index3.eat)(_types.TokenType._function);
    parseFunction(functionStart, true, false, true);
  } else if ((0, _index3.match)(_types.TokenType._class)) {
    parseClass(true, true);
  } else if ((0, _index3.match)(_types.TokenType.at)) {
    parseDecorators();
    parseClass(true, true);
  } else {
    (0, _expression.parseMaybeAssign)();
    (0, _util.semicolon)();
  }
}

function parseExportDeclaration() {
  if (_base.isTypeScriptEnabled) {
    (0, _typescript.tsParseExportDeclaration)();
  } else if (_base.isFlowEnabled) {
    (0, _flow.flowParseExportDeclaration)();
  } else {
    parseStatement(true);
  }
}

function isExportDefaultSpecifier() {
  if (_base.isTypeScriptEnabled && (0, _typescript.tsIsDeclarationStart)()) {
    return false;
  } else if (_base.isFlowEnabled && (0, _flow.flowShouldDisallowExportDefaultSpecifier)()) {
    return false;
  }
  if ((0, _index3.match)(_types.TokenType.name)) {
    return _base.state.contextualKeyword !== _index3.ContextualKeyword._async;
  }

  if (!(0, _index3.match)(_types.TokenType._default)) {
    return false;
  }

  const lookahead = (0, _index3.lookaheadTypeAndKeyword)();
  return (
    lookahead.type === _types.TokenType.comma ||
    (lookahead.type === _types.TokenType.name && lookahead.contextualKeyword === _index3.ContextualKeyword._from)
  );
}

function parseExportSpecifiersMaybe() {
  if ((0, _index3.eat)(_types.TokenType.comma)) {
    parseExportSpecifiers();
  }
}

 function parseExportFrom() {
  if ((0, _util.eatContextual)(_index3.ContextualKeyword._from)) {
    (0, _expression.parseExprAtom)();
  }
  (0, _util.semicolon)();
} exports.parseExportFrom = parseExportFrom;

function shouldParseExportStar() {
  if (_base.isFlowEnabled) {
    return (0, _flow.flowShouldParseExportStar)();
  } else {
    return (0, _index3.match)(_types.TokenType.star);
  }
}

function parseExportStar() {
  if (_base.isFlowEnabled) {
    (0, _flow.flowParseExportStar)();
  } else {
    baseParseExportStar();
  }
}

 function baseParseExportStar() {
  (0, _util.expect)(_types.TokenType.star);

  if ((0, _util.isContextual)(_index3.ContextualKeyword._as)) {
    parseExportNamespace();
  } else {
    parseExportFrom();
  }
} exports.baseParseExportStar = baseParseExportStar;

function parseExportNamespace() {
  (0, _index3.next)();
  _base.state.tokens[_base.state.tokens.length - 1].type = _types.TokenType._as;
  (0, _expression.parseIdentifier)();
  parseExportSpecifiersMaybe();
  parseExportFrom();
}

function shouldParseExportDeclaration() {
  return (
    (_base.isTypeScriptEnabled && (0, _typescript.tsIsDeclarationStart)()) ||
    (_base.isFlowEnabled && (0, _flow.flowShouldParseExportDeclaration)()) ||
    _base.state.type === _types.TokenType._var ||
    _base.state.type === _types.TokenType._const ||
    _base.state.type === _types.TokenType._let ||
    _base.state.type === _types.TokenType._function ||
    _base.state.type === _types.TokenType._class ||
    (0, _util.isContextual)(_index3.ContextualKeyword._async) ||
    (0, _index3.match)(_types.TokenType.at)
  );
}

// Parses a comma-separated list of module exports.
 function parseExportSpecifiers() {
  let first = true;

  // export { x, y as z } [from '...']
  (0, _util.expect)(_types.TokenType.braceL);

  while (!(0, _index3.eat)(_types.TokenType.braceR)) {
    if (first) {
      first = false;
    } else {
      (0, _util.expect)(_types.TokenType.comma);
      if ((0, _index3.eat)(_types.TokenType.braceR)) break;
    }

    (0, _expression.parseIdentifier)();
    _base.state.tokens[_base.state.tokens.length - 1].identifierRole = _index3.IdentifierRole.ExportAccess;
    if ((0, _util.eatContextual)(_index3.ContextualKeyword._as)) {
      (0, _expression.parseIdentifier)();
    }
  }
} exports.parseExportSpecifiers = parseExportSpecifiers;

// Parses import declaration.

 function parseImport() {
  if (_base.isTypeScriptEnabled && (0, _index3.match)(_types.TokenType.name) && (0, _index3.lookaheadType)() === _types.TokenType.eq) {
    (0, _typescript.tsParseImportEqualsDeclaration)();
    return;
  }

  // import '...'
  if ((0, _index3.match)(_types.TokenType.string)) {
    (0, _expression.parseExprAtom)();
  } else {
    parseImportSpecifiers();
    (0, _util.expectContextual)(_index3.ContextualKeyword._from);
    (0, _expression.parseExprAtom)();
  }
  (0, _util.semicolon)();
} exports.parseImport = parseImport;

// eslint-disable-next-line no-unused-vars
function shouldParseDefaultImport() {
  return (0, _index3.match)(_types.TokenType.name);
}

function parseImportSpecifierLocal() {
  (0, _expression.parseIdentifier)();
}

// Parses a comma-separated list of module imports.
function parseImportSpecifiers() {
  if (_base.isFlowEnabled) {
    (0, _flow.flowStartParseImportSpecifiers)();
  }

  let first = true;
  if (shouldParseDefaultImport()) {
    // import defaultObj, { x, y as z } from '...'
    parseImportSpecifierLocal();

    if (!(0, _index3.eat)(_types.TokenType.comma)) return;
  }

  if ((0, _index3.match)(_types.TokenType.star)) {
    (0, _index3.next)();
    (0, _util.expectContextual)(_index3.ContextualKeyword._as);

    parseImportSpecifierLocal();

    return;
  }

  (0, _util.expect)(_types.TokenType.braceL);
  while (!(0, _index3.eat)(_types.TokenType.braceR)) {
    if (first) {
      first = false;
    } else {
      // Detect an attempt to deep destructure
      if ((0, _index3.eat)(_types.TokenType.colon)) {
        (0, _util.unexpected)(
          null,
          "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
        );
      }

      (0, _util.expect)(_types.TokenType.comma);
      if ((0, _index3.eat)(_types.TokenType.braceR)) break;
    }

    parseImportSpecifier();
  }
}

function parseImportSpecifier() {
  if (_base.isFlowEnabled) {
    (0, _flow.flowParseImportSpecifier)();
    return;
  }
  (0, _expression.parseIdentifier)();
  if ((0, _util.eatContextual)(_index3.ContextualKeyword._as)) {
    (0, _expression.parseIdentifier)();
  }
}
